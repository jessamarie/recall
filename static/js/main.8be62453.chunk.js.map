{"version":3,"sources":["components/TopicList.js","containers/TopicPickerContainer.js","components/Sentence.js","containers/SentencesContainer.js","App.js","registerServiceWorker.js","index.js"],"names":["TopicList","onClick","bind","this","props","topics","length","map","topic","index","className","selectedIndex","e","id","name","preventDefault","onTopicSelect","onTopicSubmit","listItems","ListItems","list","onSubmit","onChange","onInputChange","onKeyDown","onListTraversal","placeholder","Component","TopicPickerContainer","state","matchingTopics","selectedID","handleInputChange","handleTopicSubmit","handleTopicSelect","handleListTraversal","axios","get","then","response","setState","data","catch","err","console","log","input","filter","toLowerCase","startsWith","target","value","findMatchingTopics","setTopic","newSelectedIndex","newSelectedID","matchingTopicsExist","keyCode","moveSelectionUp","moveSelectionDown","Sentence","sentence","word","extracted","style","width","correct","onAnswerChange","attempt","disabled","key","exclusions","keyCounter","SentencesContainer","extractedSentences","prepSentences","currentSentence","currentIndex","handleAnswerChange","next","reveal","previous","restart","checkAnswer","sentences","words","trim","match","join","split","wordsToExtract","getWordsToExtract","extractWordsFromSentences","sentenceWords","includes","wordToExtract","getWordToExtract","push","currentWordsToExtract","excludedWords","getExtractableWords","getRandomWordByIndex","exclusionWords","wordsSet","Set","exclusionsSet","difference","x","has","Array","from","len","Math","floor","random","newSentence","slice","newExtractedSentences","newCurrentIndex","title","resetTopic","App","selectedTopic","obj","Object","keys","constructor","isEmpty","container","Container","isLocalhost","Boolean","window","location","hostname","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","status","headers","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.8be62453.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport './TopicList.css'\r\n\r\n/**\r\n * TopicList is the component that displays a list of topics\r\n */\r\nclass TopicList extends Component {\r\n  /* constructor */\r\n  constructor () {\r\n    super()\r\n\r\n    this.onClick = this.onClick.bind(this)\r\n  }\r\n  /*\r\n    ListItems fills the dropdown with topics that match the\r\n    input data\r\n  */\r\n  ListItems () {\r\n    if (this.props.topics && this.props.topics.length > 0) {\r\n      return this.props.topics.map((topic, index) => {\r\n        return (\r\n          <li key={index}\r\n            className={this.props.selectedIndex === index ? 'selected' : ''}\r\n            onClick={(e) => this.onClick(e, topic.id, index)}>{topic.name}</li>\r\n        )\r\n      })\r\n    }\r\n\r\n    return null\r\n  }\r\n\r\n  onClick (e, id, index) {\r\n    e.preventDefault()\r\n    this.props.onTopicSelect(e, id, index)\r\n    this.props.onTopicSubmit(e)\r\n  }\r\n\r\n  render () {\r\n    var listItems = this.ListItems()\r\n    var list = listItems ? (<ul> {listItems} </ul>) : null\r\n\r\n    return (\r\n      <form className='TopicList' onSubmit={this.props.onTopicSubmit}>\r\n        <div className='input-wrapper'>\r\n          <input list='topics'\r\n            onChange={this.props.onInputChange}\r\n            onKeyDown={this.props.onListTraversal}\r\n            placeholder='Enter a topic (e.g. Web)' />\r\n          {/* <span className=\"autocomplete\"></span> */}\r\n        </div>\r\n        <div className='list-wrapper'>{list}</div>\r\n      </form>\r\n    )\r\n  }\r\n}\r\n\r\nexport default TopicList\r\n","import React, { Component } from 'react';\r\nimport TopicList from '../components/TopicList';\r\n\r\nimport './TopicPickerContainer.css';\r\nimport axios from 'axios';\r\n\r\n/**\r\n * TopicList is the component that handles events related\r\n * to a user selecting a topic\r\n */\r\nclass TopicPickerContainer extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      topics: [],\r\n      matchingTopics: [],\r\n      /* stores the id of the currently selected topic in the dropdown */\r\n      selectedID: 0, // no id can be 0\r\n      /* stores the index of the currently selected topic in the dropdown */\r\n      selectedIndex: -1\r\n    };\r\n\r\n    this.handleInputChange = this.handleInputChange.bind(this);\r\n    this.handleTopicSubmit = this.handleTopicSubmit.bind(this);\r\n    this.handleTopicSelect = this.handleTopicSelect.bind(this);\r\n    this.handleListTraversal = this.handleListTraversal.bind(this);\r\n  }\r\n\r\n  /* This will call the api to get all the topic data */\r\n  componentDidMount() {\r\n    axios\r\n      .get('https://recall-api.onrender.com/api/topics')\r\n      .then((response) => {\r\n        this.setState({\r\n          topics: response.data\r\n        });\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n      });\r\n  }\r\n\r\n  /* findMatchingTopics returns a list of topic names that\r\n     the user input startsWith\r\n  */\r\n  findMatchingTopics(input) {\r\n    var topics = [];\r\n\r\n    if (input !== '') {\r\n      topics = this.state.topics.filter((topic) => {\r\n        return topic.name.toLowerCase().startsWith(input.toLowerCase());\r\n      });\r\n    }\r\n\r\n    return topics;\r\n  }\r\n\r\n  handleInputChange(e) {\r\n    var input = e.target.value;\r\n    var topics = this.findMatchingTopics(input);\r\n    this.setState({\r\n      matchingTopics: topics,\r\n      selectedID: 0,\r\n      selectedIndex: -1\r\n    });\r\n  }\r\n\r\n  /* matchingTopicsExist returns true if the matchingTopics\r\n    array is not empty, o.w false\r\n  */\r\n  matchingTopicsExist() {\r\n    if (this.state.matchingTopics && this.state.matchingTopics.length > 0) {\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  /* handleTopicSubmit returns the selected Topic\r\n    to the App, to be passed on to the Sentences\r\n    component for preparation.\r\n  */\r\n  handleTopicSubmit(e) {\r\n    e.preventDefault();\r\n\r\n    // do nothing if the index is less than or greater than\r\n    // the length of the current matchingTopics\r\n    if (\r\n      this.state.selectedIndex < 0 ||\r\n      this.state.selectedIndex > this.state.matchingTopics.length\r\n    ) {\r\n      return;\r\n    }\r\n\r\n    this.props.setTopic(this.state.matchingTopics[this.state.selectedIndex]);\r\n    this.setState({\r\n      selectedID: 0,\r\n      selectedIndex: -1\r\n    });\r\n  }\r\n\r\n  /*\r\n    handleTopicSelect changes the selectedID\r\n    to the one that the user clicked\r\n  */\r\n  handleTopicSelect(e, id, index) {\r\n    this.setState({\r\n      selectedID: id,\r\n      selectedIndex: index\r\n    });\r\n  }\r\n\r\n  /*\r\n    moveSelectionUp sets the selectedIndex and id\r\n    to the previous one's in matchingTopics\r\n  */\r\n  moveSelectionUp() {\r\n    var newSelectedIndex = this.state.selectedIndex - 1;\r\n\r\n    // prevent index out of bounds\r\n    if (newSelectedIndex < 0) {\r\n      return;\r\n    }\r\n    var newSelectedID = this.state.matchingTopics[newSelectedIndex].id;\r\n\r\n    this.setState({\r\n      selectedIndex: newSelectedIndex,\r\n      selectedID: newSelectedID\r\n    });\r\n  }\r\n\r\n  /*\r\n    moveSelectionDown sets the selectedIndex and id\r\n    to the next one's in matchingTopics\r\n  */\r\n  moveSelectionDown() {\r\n    var newSelectedIndex = this.state.selectedIndex + 1;\r\n    // prevent index out of bounds\r\n    if (newSelectedIndex > this.state.matchingTopics.length - 1) {\r\n      return;\r\n    }\r\n    var newSelectedID = this.state.matchingTopics[newSelectedIndex].id;\r\n\r\n    this.setState({\r\n      selectedIndex: newSelectedIndex,\r\n      selectedID: newSelectedID\r\n    });\r\n  }\r\n\r\n  /*\r\n    handleListTraversal handles the event where the\r\n    user hits the down or up key\r\n  */\r\n  handleListTraversal(e) {\r\n    if (this.matchingTopicsExist()) {\r\n      // if the keyCode is the 'UP' key\r\n      if (e.keyCode === 38) {\r\n        this.moveSelectionUp();\r\n        // if the keyCode is the 'DOWN' key\r\n      } else if (e.keyCode === 40) {\r\n        this.moveSelectionDown();\r\n      }\r\n    }\r\n  } // end handleKeyDown\r\n\r\n  render() {\r\n    return (\r\n      <div className='TopicPickerContainer'>\r\n        <TopicList\r\n          topics={this.state.matchingTopics}\r\n          selectedIndex={this.state.selectedIndex}\r\n          onInputChange={this.handleInputChange}\r\n          onTopicSubmit={this.handleTopicSubmit}\r\n          onTopicSelect={this.handleTopicSelect}\r\n          onListTraversal={this.handleListTraversal}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TopicPickerContainer;\r\n","import React, { Component } from 'react'\r\nimport './Sentence.css'\r\n\r\n/**\r\n * Sentence is the component that displays a sentences\r\n */\r\nclass Sentence extends Component {\r\n  Sentence () {\r\n    var sentence = this.props.sentence\r\n\r\n    return sentence.map((word, index) => {\r\n      if (word.extracted) {\r\n        var style = {\r\n          width: `${word.word.length * 2.3}vmax`\r\n        }\r\n\r\n        var className = ''\r\n\r\n        if (word.correct === true) {\r\n          className = 'correct'\r\n        } else if (word.correct === false) {\r\n          className = 'incorrect'\r\n        }\r\n\r\n        return (\r\n          <input\r\n            className={className}\r\n            style={style}\r\n            onChange={(e) => this.props.onAnswerChange(e, index)}\r\n            value={word.attempt}\r\n            key={word.key}\r\n            disabled={word.correct} />\r\n        )\r\n      }\r\n\r\n      return (\r\n        <span key={word.key}>{word.word}</span>\r\n      )\r\n    })\r\n  }\r\n\r\n  render () {\r\n    var sentence = this.Sentence()\r\n    return (\r\n      <div className='Sentence'>\r\n        <p>{sentence}.</p>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Sentence\r\n","import React, { Component } from 'react'\r\nimport FontAwesome from 'react-fontawesome'\r\n\r\nimport './SentencesContainer.css'\r\nimport Sentence from '../components/Sentence'\r\n\r\n/* exclusions is a list of words that will not be extracted\r\n  from a sentence. */\r\nvar exclusions = [\r\n  'a', 'the', 'an', 'to', 'is', 'are', 'that', 'of', 'like', 'as',\r\n  'this', 'also', 'from', 'into', 'can', 'for', 'or', 'and', 'on',\r\n  'with', 'onto', 'over', 'our', 'my', 'your', 'way', 'how', 'what',\r\n  'when', 'where', 'why', 'who', 'type', 'kind', 'just', 'was', 'be',\r\n  'get', 'getting', 'in', 'gives', 'protects', 'against', 'no', 'called',\r\n  'number', 'again', 'by', 'has', 'if', 'made', 'make', 'occur', 'at',\r\n  'not', 'using', 'use', 'work', 'works', 'allows', 'us', 'written'\r\n]\r\n\r\nvar keyCounter = 0\r\n\r\n/**\r\n * SentenceContainer is the component that holds all\r\n * of the logic related to breaking down sentences\r\n */\r\nclass SentencesContainer extends Component {\r\n  /* constructor */\r\n  constructor (props) {\r\n    super(props)\r\n\r\n    var extractedSentences = this.prepSentences()\r\n\r\n    this.state = {\r\n      extractedSentences: extractedSentences,\r\n      currentSentence: extractedSentences[0],\r\n      currentIndex: 0\r\n    }\r\n\r\n    this.handleAnswerChange = this.handleAnswerChange.bind(this)\r\n    this.next = this.next.bind(this)\r\n    this.reveal = this.reveal.bind(this)\r\n    this.previous = this.previous.bind(this)\r\n    this.restart = this.restart.bind(this)\r\n    this.checkAnswer = this.checkAnswer.bind(this)\r\n  }\r\n\r\n  /* prepSentences extracts each sentence of 1-2 words\r\n     and returns the sentence back as an array of objects.\r\n\r\n     If the word is not extracted then:\r\n     obj = {\r\n      word: The orginal word\r\n      key: A Unique identifier,\r\n      extracted: false\r\n     }\r\n     obj = {\r\n      word: The orginal word\r\n      attempt: '' // the user's input\r\n      key: A Unique identifier,\r\n      correct: false // word !== attempt,\r\n      extracted: true\r\n    }\r\n  */\r\n  prepSentences () {\r\n    return this.props.topic.sentences.map((sentence) => {\r\n      // trim whitespace and remove all punctuation\r\n      var words = sentence.toLowerCase().trim().match(/[^_\\W]+/g).join(' ').split(' ')\r\n\r\n      var wordsToExtract = this.getWordsToExtract(words, words.length)\r\n\r\n      var extractedSentence = this.extractWordsFromSentences(words, wordsToExtract)\r\n\r\n      return extractedSentence\r\n    })\r\n  }\r\n\r\n  /*\r\n    extractWordsFromSentences marks a word as extracted if it\r\n    is in the wordsToExtract array.\r\n\r\n    @returns an array of objects that represent the full sentence,\r\n    one word at a time\r\n  */\r\n  extractWordsFromSentences (sentenceWords, wordsToExtract) {\r\n    var extractedSentence = sentenceWords.map((word) => {\r\n      keyCounter = keyCounter + 1\r\n\r\n      if (wordsToExtract.includes(word)) {\r\n        return {\r\n          key: keyCounter,\r\n          word: word,\r\n          attempt: '',\r\n          extracted: true,\r\n          correct: null\r\n        }\r\n      } else {\r\n        return {\r\n          key: keyCounter,\r\n          word: word,\r\n          extracted: false\r\n        }\r\n      }\r\n    })\r\n\r\n    return extractedSentence\r\n  }\r\n\r\n  /*\r\n    getWordsToExtract handles the process of finding 1-2\r\n    words to remove from an array\r\n  */\r\n  getWordsToExtract (words, length) {\r\n    var wordsToExtract = []\r\n\r\n    var wordToExtract = this.getWordToExtract(words, wordsToExtract)\r\n    wordsToExtract.push(wordToExtract)\r\n\r\n    // repeat if length is long enough\r\n    if (length > 5) {\r\n      wordToExtract = this.getWordToExtract(words, wordsToExtract)\r\n      wordsToExtract.push(wordToExtract)\r\n    }\r\n\r\n    return wordsToExtract\r\n  }\r\n\r\n  /*\r\n    getWordToExtract handles the process of finding one\r\n    word to remove from a given array of words\r\n  */\r\n  getWordToExtract (words, currentWordsToExtract) {\r\n    var wordToExtract\r\n    var excludedWords = []\r\n\r\n    excludedWords.push(...exclusions)\r\n    excludedWords.push(...currentWordsToExtract)\r\n\r\n    words = this.getExtractableWords(words, excludedWords)\r\n    wordToExtract = this.getRandomWordByIndex(words, words.length)\r\n\r\n    return wordToExtract\r\n  }\r\n\r\n  /* getExtractableWords returns the set difference of\r\n  two arrays of words\r\n  */\r\n  getExtractableWords (words, exclusionWords) {\r\n    let wordsSet = new Set(words)\r\n    let exclusionsSet = new Set(exclusionWords)\r\n    let difference = new Set([...wordsSet].filter(x => !exclusionsSet.has(x)))\r\n    return Array.from(difference)\r\n  }\r\n\r\n  /* getRandomWordByIndex finds one random word in an array\r\n    to extract\r\n  */\r\n  getRandomWordByIndex (words, len) {\r\n    var randomIndex = Math.floor(Math.random() * len)\r\n    return words[randomIndex]\r\n  }\r\n\r\n  /* getRandomWordByIndex finds one random word in an array\r\n    to extract\r\n  */\r\n  handleAnswerChange (e, index) {\r\n    var input = e.target.value\r\n\r\n    var newSentence = this.state.currentSentence.slice()\r\n    var newExtractedSentences = this.state.extractedSentences.slice()\r\n\r\n    newSentence[index].attempt = input\r\n\r\n    if (input === newSentence[index].word) {\r\n      newSentence[index].correct = true\r\n    }\r\n\r\n    newExtractedSentences[this.state.currentIndex] = newSentence\r\n\r\n    this.setState({\r\n      currentSentence: newSentence,\r\n      extractedSentences: newExtractedSentences\r\n    })\r\n  }\r\n\r\n  /* next moves to the next sentence */\r\n  next () {\r\n    if (this.state.currentIndex < this.state.extractedSentences.length - 1) {\r\n      var newCurrentIndex = this.state.currentIndex + 1\r\n      this.setState({\r\n        currentIndex: newCurrentIndex,\r\n        currentSentence: this.state.extractedSentences[newCurrentIndex]\r\n      })\r\n    }\r\n  }\r\n\r\n  /* next moves to the previous sentence */\r\n  previous () {\r\n    if (this.state.currentIndex > 0) {\r\n      var newCurrentIndex = this.state.currentIndex - 1\r\n      this.setState({\r\n        currentIndex: newCurrentIndex,\r\n        currentSentence: this.state.extractedSentences[newCurrentIndex]\r\n      })\r\n    }\r\n  }\r\n\r\n  /* restart reprepares the sentences and starts them at the beginning */\r\n  restart () {\r\n    var extractedSentences = this.prepSentences()\r\n\r\n    this.setState({\r\n      extractedSentences: extractedSentences,\r\n      currentIndex: 0,\r\n      currentSentence: extractedSentences[0]\r\n    })\r\n  }\r\n\r\n  /* reveal completes the sentence */\r\n  reveal () {\r\n    var newSentence = this.state.currentSentence.map((word) => {\r\n      word.correct = true\r\n      word.attempt = word.word\r\n      return word\r\n    })\r\n\r\n    this.setState({\r\n      currentSentence: newSentence\r\n    })\r\n  }\r\n\r\n  /* checkAnswer checks if the sentence is correct */\r\n  checkAnswer (e) {\r\n    var newSentence = this.state.currentSentence.map((word) => {\r\n      if (word.attempt !== word.word) {\r\n        word.correct = false\r\n      }\r\n      return word\r\n    })\r\n\r\n    this.setState({\r\n      currentSentence: newSentence\r\n    })\r\n  }\r\n\r\n  render () {\r\n    return (\r\n      <div className='SentencesContainer'>\r\n        <div className='options top'>\r\n          <button title='pick new topic' className='back' onClick={this.props.resetTopic}><FontAwesome name='chevron-left' /></button>\r\n          <h2 className='topic'>{this.props.topic.name}</h2>\r\n          <button className='empty' >.</button>\r\n        </div>\r\n        <Sentence\r\n          onAnswerChange={this.handleAnswerChange}\r\n          sentence={this.state.currentSentence}\r\n          currentIndex={this.state.currentIndex}\r\n        />\r\n\r\n        <div className='options bottom'>\r\n          <button className='left' title='previous sentence' onClick={this.previous}><FontAwesome name='arrow-left' /></button>\r\n          <button className='restart' title='restart sentence set' onClick={this.restart}><FontAwesome name='repeat' /></button>\r\n          <button className='check' title='check answer' onClick={this.checkAnswer}><FontAwesome name='check-square' /></button>\r\n          <button className='help' title='reveal answer' onClick={this.reveal}><FontAwesome name='question-circle' /></button>\r\n          <button className='right' title='next sentence' onClick={this.next}><FontAwesome name='arrow-right' /></button>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default SentencesContainer\r\n","import React, { Component } from 'react'\r\nimport 'font-awesome/css/font-awesome.css'\r\n\r\nimport './App.css'\r\n\r\n// import FontAwesome from 'react-fontawesome'\r\n\r\nimport TopicPickerContainer from './containers/TopicPickerContainer'\r\nimport SentencesContainer from './containers/SentencesContainer'\r\n\r\n/**\r\n * App is the component that holds the entire application\r\n */\r\nclass App extends Component {\r\n  constructor () {\r\n    super()\r\n    this.state = {\r\n      selectedTopic: {}\r\n    }\r\n\r\n    this.setTopic = this.setTopic.bind(this)\r\n    this.resetTopic = this.resetTopic.bind(this)\r\n  }\r\n\r\n  /*\r\n    setTopic is called by TopicPickerContainer when a user\r\n    has submitted a topic\r\n   */\r\n  setTopic (topic) {\r\n    this.setState({\r\n      selectedTopic: topic\r\n    })\r\n  }\r\n\r\n  /*\r\n    resetTopic is called by SentencesContainer to reset a topic\r\n   */\r\n  resetTopic (e) {\r\n    this.setState({\r\n      selectedTopic: {}\r\n    })\r\n  }\r\n\r\n  /* isEmpty checks if an object is empty */\r\n  isEmpty (obj) {\r\n    return Object.keys(obj).length === 0 && obj.constructor === Object\r\n  }\r\n\r\n  /*\r\n    Container returns the proper container based on the\r\n    value of selectedTopic\r\n  */\r\n  Container () {\r\n    if (!this.isEmpty(this.state.selectedTopic)) {\r\n      return (<SentencesContainer\r\n        resetTopic={this.resetTopic}\r\n        topic={this.state.selectedTopic} />)\r\n    } else {\r\n      return (\r\n        <TopicPickerContainer setTopic={this.setTopic} />\r\n      )\r\n    }\r\n  }\r\n\r\n  render () {\r\n    var container = this.Container()\r\n\r\n    return (\r\n      <div className='App'>\r\n        <header>\r\n          {/* <div className='instructions'><FontAwesome name='question-circle' /></div> */}\r\n          <h1>Recall</h1>\r\n        </header>\r\n        <main>\r\n          <div className='container'>\r\n            <div className='flashcard'>\r\n              {container}\r\n            </div>\r\n          </div>\r\n        </main>\r\n        <footer>Made with &hearts; by Jessa</footer>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default App\r\n","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n)\r\n\r\nexport default function register () {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location)\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n      return\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\r\n\r\n      if (!isLocalhost) {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl)\r\n      } else {\r\n        // This is running on localhost. Lets check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl)\r\n      }\r\n    })\r\n  }\r\n}\r\n\r\nfunction registerValidSW (swUrl) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log('New content is available; please refresh.')\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.')\r\n            }\r\n          }\r\n        }\r\n      }\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error)\r\n    })\r\n}\r\n\r\nfunction checkValidServiceWorker (swUrl) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload()\r\n          })\r\n        })\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl)\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      )\r\n    })\r\n}\r\n\r\nexport function unregister () {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister()\r\n    })\r\n  }\r\n}\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport './index.css'\r\nimport App from './App'\r\nimport registerServiceWorker from './registerServiceWorker'\r\n\r\nReactDOM.render(<App />, document.getElementById('root'))\r\nregisterServiceWorker()\r\n"],"sourceRoot":""}